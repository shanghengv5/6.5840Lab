package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import (
	"fmt"
	"os"
	"regexp"
	"strconv"

	"6.5840/mr"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	kva := []mr.KeyValue{}
	// Open the book file
	file, err := os.Open(filename)
	if err != nil {
		return kva
	}
	defer file.Close()
	// grep a word less than 5
	regStr := fmt.Sprintf(`\b\w{1,4}\b`)
	words := regexp.MustCompile(regStr).FindAllString(contents, -1)

	for _, word := range words {
		kv := mr.KeyValue{word, "1"}
		kva = append(kva, kv)
	}

	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
